#include <Adafruit_NeoPixel.h>
#include <WiFi.h>
#include <esp_now.h>
#include <esp_wifi.h> // only for esp_wifi_set_channel()

#define CHANNEL 1

#define LED_PIN 0
#define ADC_PIN 4
#define ADC_ENABLE_PIN 6
#define BUTTON_PIN 7

/* Adafruit_NeoPixel LED = Adafruit_NeoPixel(1, LED_PIN, NEO_GRB + NEO_KHZ800);
 */

uint8_t broadcastAddress[] = {0xDC, 0x54, 0x75, 0x62, 0x50, 0xFC};

typedef struct struct_message_button {
  bool answer;
  float battery_level;
} struct_message_button;

typedef struct struct_message_controller {
  bool answer;
} struct_message_controller;

struct_message_button buttonData;
struct_message_controller controllerData;
esp_now_peer_info_t controllerInfo;

// Init ESP Now with fallback
void InitESPNow() {
  WiFi.disconnect();
  if (esp_now_init() == ESP_OK) {
    Serial.println("ESPNow Init Success");
  } else {
    Serial.println("ESPNow Init Failed");
    // Retry InitESPNow, add a counte and then restart?
    // InitESPNow();
    // or Simply Restart
    ESP.restart();
  }
}

/* void colorWipe(uint32_t c) { */
/*   for (uint8_t i = 0; i < LED.numPixels(); i++) { */
/*     LED.setPixelColor(i, c); */
/*     LED.show(); */
/*   } */
/* } */

float get_battery_voltage() {
  digitalWrite(ADC_ENABLE_PIN, LOW);
  delayMicroseconds(10);
  int sum = 0;
  for (int i = 0; i < 100; i++) {
    sum = sum + analogRead(ADC_PIN);
  }
  float result = sum / 100.0;
  digitalWrite(ADC_ENABLE_PIN, HIGH);
  return float(result) * (1.42) - 50;
}

void sendButtonData() {
  /* colorWipe(LED.Color(0, 255, 0)); */
  buttonData.answer = true;
  buttonData.battery_level = get_battery_voltage();
  // Send message via ESP-NOW
  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *)&buttonData,
                                  sizeof(buttonData));
}

// Callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  /* colorWipe(LED.Color(0, 0, 0)); */
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success"
                                                : "Delivery Fail");
}

// Callback when data is received
void OnDataRecv(const uint8_t *mac, const uint8_t *incomingData, int len) {
  memcpy(&controllerData, incomingData, sizeof(controllerData));
  Serial.print("Bytes received: ");
  Serial.println(len);
}

void IRAM_ATTR onTimer() {
  if (digitalRead(BUTTON_PIN) == LOW) {
    sendButtonData();
  }
}

hw_timer_t *read_button_timer = NULL;

void setup() {
  // Init Serial Monitor
  Serial.begin(115200);

  pinMode(BUTTON_PIN, INPUT_PULLUP);
  pinMode(ADC_PIN, INPUT);
  pinMode(ADC_ENABLE_PIN, OUTPUT);
  digitalWrite(ADC_ENABLE_PIN, HIGH);
  analogReadResolution(12);

  btStop();

  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);
  esp_wifi_set_channel(CHANNEL, WIFI_SECOND_CHAN_NONE);

  // Init ESP-NOW
  InitESPNow();

  /* LED.begin(); */
  /* LED.show();             // Disable all the pixel by default when
   * initialized */
  /* LED.setBrightness(255); // Set brightness */

  // Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Trasnmitted packet
  esp_now_register_send_cb(OnDataSent);

  // Register peer
  memcpy(controllerInfo.peer_addr, broadcastAddress, 6);
  controllerInfo.channel = CHANNEL;
  controllerInfo.encrypt = false;

  // Add peer
  if (esp_now_add_peer(&controllerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }
  // Register for a callback function that will be called when data is received
  esp_now_register_recv_cb(OnDataRecv);

  /* attachInterrupt(digitalPinToInterrupt(BUTTON_PIN), sendButtonData,
   * FALLING); */
  read_button_timer = timerBegin(0, 80, true);
  timerAttachInterrupt(read_button_timer, &onTimer, true);
  timerAlarmWrite(read_button_timer, 50000, true);
  timerAlarmEnable(read_button_timer);
}

void loop() {}
